{"version":3,"sources":["components/auth/auth-service.js","components/Signup/Signup.jsx","components/Navbar/Navbar.jsx","components/Login/Login.jsx","App.js","serviceWorker.js","index.js"],"names":["AuthService","_this","this","Object","classCallCheck","signup","email","password","service","post","then","response","data","loggedin","get","login","logout","axios","create","baseURL","concat","process","API_URL","withCredentials","Signup","props","possibleConstructorReturn","getPrototypeOf","call","handleFormSubmit","event","preventDefault","state","name","lastName","setState","getUser","catch","error","console","log","handleChange","_event$target","target","value","defineProperty","_this2","react_default","a","createElement","onSubmit","type","onChange","e","Link","to","Component","Navbar","loggedInUser","className","Login","App","getTheUser","userObj","err","_this3","fetchUser","components_Navbar_Navbar","userInSession","Switch","Route","exact","path","render","components_Login_Login","components_Signup_Signup","Boolean","window","location","hostname","match","ReactDOM","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d71042ff.chunk.js","sourcesContent":["import axios from 'axios';\n\nclass AuthService {\n  constructor() {\n    let service = axios.create({\n      baseURL: `${process.env.API_URL}/`, // process.env.API_URL\n      withCredentials: true\n    });\n    this.service = service;\n  }\n\n  signup = (email, password) => {\n    return this.service.post('/signup', {email, password})\n    .then(response => response.data)\n  }\n\n  loggedin = () => {\n    return this.service.get('/loggedin')\n    .then(response => response.data)\n  }\n\n  login = (email, password) => {\n    return this.service.post('/login', {email, password})\n    .then(response => response.data)\n  }\n  \n  logout = () => {\n    return this.service.post('/logout', {})\n    .then(response => response.data)\n  }\n  \n}\n\nexport default AuthService;","import React, { Component } from 'react';\nimport AuthService from '../auth/auth-service';\nimport { Link } from 'react-router-dom';\n\nclass Signup extends Component {\n  constructor(props){\n    super(props);\n    this.state = { email: '', password: '', name: '', lastName: ''};\n    this.service = new AuthService();\n  }\n\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    const email = this.state.email;\n    const password = this.state.password;\n    const name = this.state.name;\n    const lastName = this.state.lastName;\n  \n    this.service.signup(email, password, name, lastName)\n    .then( response => {\n        this.setState({\n            email: \"\", \n            password: \"\",\n            name: \"\",\n            lastName: \"\"\n        });\n    this.props.getUser(response)\n    })\n    .catch( error => console.log(error) )\n  }\n  \n  handleChange = (event) => {  \n    const {name, value} = event.target;\n    this.setState({[name]: value});\n  }\n\n  render(){\n    return(\n    <div>\n      <form onSubmit={this.handleFormSubmit}>\n\n        <label>Email:</label>\n        <input type=\"text\" name=\"email\" value={this.state.email} onChange={ e => this.handleChange(e)}/>\n        \n        <label>Password:</label>\n        <input type=\"password\" name=\"password\" value={this.state.password} onChange={ e => this.handleChange(e)}/>\n        \n        <label>Name:</label>\n        <input type=\"text\" name=\"name\" value={this.state.name} onChange={ e => this.handleChange(e)}/>\n\n        <label>Last Name:</label>\n        <input type=\"text\" name=\"lastName\" value={this.state.lastName} onChange={ e => this.handleChange(e)}/>\n\n        <input type=\"submit\" value=\"Signup\" />\n      </form>\n\n      <p>Already have an account? \n          <Link to={\"/login\"}> Login</Link>\n      </p>\n\n    </div>\n    )\n  }\n}\n\nexport default Signup;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport AuthService from '../auth/auth-service';\n\n\nclass Navbar extends Component {\n    constructor(props){\n      super(props);\n      this.state = { loggedInUser: null };\n      this.service = new AuthService();\n\n    }\n    // componentWillReceiveProps(nextProps) {\n    //     this.setState({...this.state, loggedInUser: nextProps[\"userInSession\"]})\n    //   }\n\n    // logoutUser = () =>{\n    //     this.service.logout()\n    //     .then(() => {\n    //       this.setState({ loggedInUser: null });\n    //       this.props.getUser(null);  \n    //     })\n    //   }\n       \n    render(){\n        // if(this.state.loggedInUser){\n          return(\n            <nav className=\"nav-style\">\n        {/* //       <ul>\n        //         <li>Welcome, {this.state.loggedInUser.username}</li>\n        //         <li><Link to='/projects' style={{ textDecoration: 'none' }}>Projects</Link></li>\n        //         <li>\n        //         <Link to='/'>\n        //         <button onClick={() => this.logoutUser()}>Logout</button>\n        //       </Link>                \n        //       </li>\n        //       </ul> */}\n            </nav>\n        //   )\n        // } else {\n        //   return (\n      \n        //     <nav className=\"nav-style\">\n        //       <ul>\n        //         <li><Link to='/login' style={{ textDecoration: 'none' }}>Login</Link></li>\n        //         <li><Link to='/signup' style={{ textDecoration: 'none' }}>Signup</Link></li>\n        //       </ul>\n        //     </nav>\n          )\n        }\n        // }\n}\n\nexport default Navbar;","import React, { Component } from 'react';\nimport AuthService from '../auth/auth-service';\nimport { Link } from 'react-router-dom';\n\n\nclass Login extends Component {\n    constructor(props){\n      super(props);\n      this.state = { email: '', password: '' };\n      this.service = new AuthService();\n    }\n  \n    handleFormSubmit = (event) => {\n      event.preventDefault();\n      const email = this.state.email;\n      const password = this.state.password;\n      this.service.login(email, password)\n      .then( response => {\n          this.setState({ email: \"\", password: \"\" });\n          this.props.getUser(response)\n      })\n      .catch( error => console.log(error) )\n    }\n      \n    handleChange = (event) => {  \n      const {name, value} = event.target;\n      this.setState({[name]: value});\n    }\n      \n    render(){\n      return(\n        <div>\n          <form onSubmit={this.handleFormSubmit}>\n            <label>Email:</label>\n            <input type=\"text\" name=\"email\" value={this.state.email} onChange={ e => this.handleChange(e)}/>\n            \n            <label>Password:</label>\n            <input type=\"password\" name=\"password\" value={this.state.password} onChange={ e => this.handleChange(e)}/>\n\n            <input type=\"submit\" value=\"Login\" />\n          </form>\n          <p>Don't have account? \n              <Link to={\"/signup\"}> Signup</Link>\n          </p>\n        </div>\n      )\n    }\n  }\n  \n  export default Login;","import React, { Component } from 'react';\nimport './App.css';\nimport { Switch, Route } from 'react-router-dom';\nimport AuthService from './components/auth/auth-service';\n\n\nimport Signup from './components/Signup/Signup';\nimport Navbar from './components/Navbar/Navbar';\nimport Login from './components/Login/Login';\n\n\n\nclass App extends Component {\n  \n  constructor(props){\n    super(props)\n    this.state = { loggedInUser: null };\n    this.service = new AuthService();\n  }\n\n  fetchUser(){\n    if( this.state.loggedInUser === null ){\n      this.service.loggedin()\n      .then(response =>{\n        this.setState({\n          loggedInUser:  response\n        }) \n      })\n      .catch( err =>{\n        this.setState({\n          loggedInUser:  false\n        }) \n      })\n    }\n  }\n\n  getTheUser= (userObj) => {\n    this.setState({\n      loggedInUser: userObj\n    })\n  }\n\n\n  render() {\n    this.fetchUser()\n    if(this.state.loggedInUser){\n      return (\n        <div className=\"App\">\n          <Navbar userInSession={this.state.loggedInUser} />\n          <Switch>\n  \n          </Switch>\n        </div>\n      );\n    } else {\n      \n    return (\n      <div className=\"App\">\n      <Navbar userInSession={this.state.loggedInUser} />\n\n        <Switch>\n        <Route exact path='/login' render={() => <Login getUser={this.getTheUser}/>}/>\n        <Route exact path='/signup' render={() => <Signup getUser={this.getTheUser}/>}/>\n        </Switch>\n      </div>\n    );\n  }\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}